{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","useState","counter","setCounter","style","display","flexDirection","alignItems","justifyContent","position","width","height","border","borderRadius","fontSize","color","fontWeight","cursor","onClick","parseInt","borderLeft","borderRight","background","textAlign","outline","value","onChange","evt","target","backgroundColor","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6NA+FeA,EA5FH,WACV,MAA8BC,mBAAS,GAAvC,mBAAOC,EAAP,KAAgBC,EAAhB,KAiBA,OACE,qBAAKC,MAAO,CACVC,QAAS,OACTC,cAAe,SACfC,WAAY,SACZC,eAAgB,SAChBC,SAAU,WACVC,MAAO,OACPC,OAAQ,QAPV,SASE,sBACAP,MAAO,CACLC,QAAS,OACTO,OAAQ,oBACRC,aAAc,OAJhB,UAME,qBAAKT,MAAO,CACVU,SAAU,OACVC,MAAO,UACPV,QAAS,OACTG,eAAgB,SAChBD,WAAY,SACZS,WAAY,OACZN,MAAO,OACPC,OAAQ,OACRM,OAAO,WAEPC,QAjCiB,WACnBhB,EAAU,GACZC,EAAWgB,SAASjB,GAAW,IAoB7B,eAaA,qBAAKE,MAAO,CACRU,SAAU,OACVM,WAAY,oBACZC,YAAa,oBACbC,WAAY,UACZP,MAAO,UACPC,WAAY,OACZN,MAAO,OACPC,OAAQ,OACRN,QAAS,OACTG,eAAgB,SAChBD,WAAY,UAXhB,SAaI,uBAAOH,MAAK,aACVM,MAAO,OACPC,OAAQ,OACRC,OAAQ,MACRU,WAAY,UACZC,UAAW,SACXP,WAAY,OACZD,MAAO,UACPD,SAAS,OACTU,QAAS,QATC,SAUF,aAEVC,MAAOvB,EAASwB,SAtED,SAACC,GACpBA,EAAIC,OAAOH,OAAS,GAAKE,EAAIC,OAAOH,OAAS,KAC/CtB,EAAWwB,EAAIC,OAAOH,YAsElB,qBAAKrB,MAAO,CACVU,SAAU,OACVC,MAAO,OACPV,QAAS,OACTG,eAAgB,SAChBD,WAAY,SACZsB,gBAAiB,UACjBb,WAAY,OACZN,MAAO,OACPC,OAAQ,OACRM,OAAO,WAETC,QA/EiB,WACnBhB,EAAU,KACZC,EAAWgB,SAASjB,GAAW,IAiE3B,qBCjEK4B,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.91471b08.chunk.js","sourcesContent":["import './App.css';\nimport React, { useState } from \"react\";\n\nconst App = () => {\n  const [counter, setCounter] = useState(1)\n  const updateInputValue = (evt) => {\n    if (evt.target.value >= 0 && evt.target.value <= 1000) {\n      setCounter(evt.target.value)\n    }\n  }\n  const incrementCounter = () => {\n    if (counter < 1000) {\n      setCounter(parseInt(counter) + 1)\n    }\n  }\n  const decrementCounter = () => {\n    if (counter > 0) {\n      setCounter(parseInt(counter) - 1)\n    }\n  }\n  \n  return (\n    <div style={{\n      display: 'flex',\n      flexDirection: 'column',\n      alignItems: 'center',\n      justifyContent: 'center',\n      position: 'absolute',\n      width: '100%',\n      height: '100%',\n    }}>\n      <div\n      style={{\n        display: 'flex',\n        border: '1px solid #a54946',\n        borderRadius: '5px'\n      }}>\n        <div style={{\n          fontSize: '21px',\n          color: '#a54945',\n          display: \"flex\",\n          justifyContent: \"center\",\n          alignItems: \"center\",\n          fontWeight: 'bold',\n          width: '60px',\n          height: '56px',\n          cursor:'pointer'\n        }}\n          onClick={decrementCounter}>-</div>\n        \n        <div style={{\n            fontSize: '21px',\n            borderLeft: '1px solid #a54945',\n            borderRight: '1px solid #a54945',\n            background: '#f8e9e9',\n            color: '#a54945',\n            fontWeight: 'bold',\n            width: '60px',\n            height: '56px',\n            display: 'flex',\n            justifyContent: 'center',\n            alignItems: 'center'\n          }}>\n            <input style={{\n              width: '56px',\n              height: '54px',\n              border: '0px',\n              background: '#FBE8E8',\n              textAlign: 'center',\n              fontWeight: 'bold',\n              color: '#a54945',\n              fontSize:'21px',\n              outline: 'none',\n              border: '1px solid'\n            }}\n            value={counter} onChange={updateInputValue}/>\n          </div>\n          <div style={{\n            fontSize: '21px',\n            color: '#fff',\n            display: 'flex',\n            justifyContent: 'center',\n            alignItems: 'center',\n            backgroundColor: '#B24242',\n            fontWeight: 'bold',\n            width: '60px',\n            height: '56px',\n            cursor:'pointer'\n        }}\n          onClick={incrementCounter}>+</div>\n      </div>\n    </div>\n  )\n}\n  \nexport default App","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}